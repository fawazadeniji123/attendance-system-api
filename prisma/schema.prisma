// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"

  // Optional
  // runtime                = "nodejs"
  // moduleFormat           = "esm"
  // generatedFileExtension = "ts"
  // importFileExtension    = "js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  email     String    @unique
  password  String
  isApproved     Boolean      @default(false)
  role      Role      @default(STUDENT)
  student   Student?
  lecturer  Lecturer?
}

model Student {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  matricNumber   String       @unique
  faceEncoding   Json         @db.Json
  pictureIds     String[]    
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @unique @db.ObjectId
  attendance     Attendance[]
  enrollments    Enrollment[] @relation("StudentEnrollments")
}

model Lecturer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  code        String       @unique
  description String?
  lecturer    Lecturer?    @relation(fields: [lecturerId], references: [id])
  lecturerId  String?      @db.ObjectId
  attendance  Attendance[]
  enrollments Enrollment[] @relation("CourseEnrollments")
}

model Enrollment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  student    Student  @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String   @db.ObjectId
  course     Course   @relation("CourseEnrollments", fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String   @db.ObjectId
  @@unique([studentId, courseId]) // Ensure a student can enroll in a course only once
}

model Attendance {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  timestamp DateTime         
  status    AttendanceStatus @default(ABSENT)
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String           @db.ObjectId
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String           @db.ObjectId
  @@index([studentId, courseId])
}

enum Role {
  ADMIN
  LECTURER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
